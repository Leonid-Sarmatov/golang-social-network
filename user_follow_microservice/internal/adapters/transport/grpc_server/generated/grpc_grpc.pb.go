// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.30.0
// source: grpc.proto

package generated

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	UserAutorization_LoginUserAndGetToken_FullMethodName = "/generated.UserAutorization/LoginUserAndGetToken"
	UserAutorization_RegisterNewUser_FullMethodName      = "/generated.UserAutorization/RegisterNewUser"
)

// UserAutorizationClient is the client API for UserAutorization service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UserAutorizationClient interface {
	// Авторизакция и получение токена авторизации
	LoginUserAndGetToken(ctx context.Context, in *LoginUserAndGetTokenRequest, opts ...grpc.CallOption) (*LoginUserAndGetTokenResponse, error)
	// Регистрация пользователя
	RegisterNewUser(ctx context.Context, in *RegisterNewUserRequest, opts ...grpc.CallOption) (*RegisterNewUserResponse, error)
}

type userAutorizationClient struct {
	cc grpc.ClientConnInterface
}

func NewUserAutorizationClient(cc grpc.ClientConnInterface) UserAutorizationClient {
	return &userAutorizationClient{cc}
}

func (c *userAutorizationClient) LoginUserAndGetToken(ctx context.Context, in *LoginUserAndGetTokenRequest, opts ...grpc.CallOption) (*LoginUserAndGetTokenResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(LoginUserAndGetTokenResponse)
	err := c.cc.Invoke(ctx, UserAutorization_LoginUserAndGetToken_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userAutorizationClient) RegisterNewUser(ctx context.Context, in *RegisterNewUserRequest, opts ...grpc.CallOption) (*RegisterNewUserResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RegisterNewUserResponse)
	err := c.cc.Invoke(ctx, UserAutorization_RegisterNewUser_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UserAutorizationServer is the server API for UserAutorization service.
// All implementations must embed UnimplementedUserAutorizationServer
// for forward compatibility.
type UserAutorizationServer interface {
	// Авторизакция и получение токена авторизации
	LoginUserAndGetToken(context.Context, *LoginUserAndGetTokenRequest) (*LoginUserAndGetTokenResponse, error)
	// Регистрация пользователя
	RegisterNewUser(context.Context, *RegisterNewUserRequest) (*RegisterNewUserResponse, error)
	mustEmbedUnimplementedUserAutorizationServer()
}

// UnimplementedUserAutorizationServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedUserAutorizationServer struct{}

func (UnimplementedUserAutorizationServer) LoginUserAndGetToken(context.Context, *LoginUserAndGetTokenRequest) (*LoginUserAndGetTokenResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LoginUserAndGetToken not implemented")
}
func (UnimplementedUserAutorizationServer) RegisterNewUser(context.Context, *RegisterNewUserRequest) (*RegisterNewUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterNewUser not implemented")
}
func (UnimplementedUserAutorizationServer) mustEmbedUnimplementedUserAutorizationServer() {}
func (UnimplementedUserAutorizationServer) testEmbeddedByValue()                          {}

// UnsafeUserAutorizationServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UserAutorizationServer will
// result in compilation errors.
type UnsafeUserAutorizationServer interface {
	mustEmbedUnimplementedUserAutorizationServer()
}

func RegisterUserAutorizationServer(s grpc.ServiceRegistrar, srv UserAutorizationServer) {
	// If the following call pancis, it indicates UnimplementedUserAutorizationServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&UserAutorization_ServiceDesc, srv)
}

func _UserAutorization_LoginUserAndGetToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoginUserAndGetTokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserAutorizationServer).LoginUserAndGetToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserAutorization_LoginUserAndGetToken_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserAutorizationServer).LoginUserAndGetToken(ctx, req.(*LoginUserAndGetTokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserAutorization_RegisterNewUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterNewUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserAutorizationServer).RegisterNewUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserAutorization_RegisterNewUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserAutorizationServer).RegisterNewUser(ctx, req.(*RegisterNewUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// UserAutorization_ServiceDesc is the grpc.ServiceDesc for UserAutorization service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var UserAutorization_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "generated.UserAutorization",
	HandlerType: (*UserAutorizationServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "LoginUserAndGetToken",
			Handler:    _UserAutorization_LoginUserAndGetToken_Handler,
		},
		{
			MethodName: "RegisterNewUser",
			Handler:    _UserAutorization_RegisterNewUser_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "grpc.proto",
}
