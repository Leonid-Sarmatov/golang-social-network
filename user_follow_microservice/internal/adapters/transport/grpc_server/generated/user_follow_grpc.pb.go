// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.31.0
// source: user_follow.proto

package generated

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	UserFollow_AddNewUser_FullMethodName                        = "/generated.UserFollow/AddNewUser"
	UserFollow_AddNewPost_FullMethodName                        = "/generated.UserFollow/AddNewPost"
	UserFollow_GetPostsAddedByUser_FullMethodName               = "/generated.UserFollow/GetPostsAddedByUser"
	UserFollow_SubscribeUsers_FullMethodName                    = "/generated.UserFollow/SubscribeUsers"
	UserFollow_GetNumSubscribersAndSubscriptions_FullMethodName = "/generated.UserFollow/GetNumSubscribersAndSubscriptions"
)

// UserFollowClient is the client API for UserFollow service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UserFollowClient interface {
	// Создание нового пользователя
	AddNewUser(ctx context.Context, in *AddNewUserRequest, opts ...grpc.CallOption) (*AddNewUserResponse, error)
	// Создание нового поста
	AddNewPost(ctx context.Context, in *AddNewPostRequest, opts ...grpc.CallOption) (*AddNewPostResponse, error)
	// Получить созданные пользователем посты
	GetPostsAddedByUser(ctx context.Context, in *GetPostsAddedByUserRequest, opts ...grpc.CallOption) (*GetPostsAddedByUserResponse, error)
	// Подписать одного пользователя на другого
	SubscribeUsers(ctx context.Context, in *SubscribeUsersRequest, opts ...grpc.CallOption) (*SubscribeUsersResponse, error)
	// Получить количество подписок и подписчиков пользователя
	GetNumSubscribersAndSubscriptions(ctx context.Context, in *GetSubscribersAndSubscriptionsRequest, opts ...grpc.CallOption) (*GetSubscribersAndSubscriptionsResponse, error)
}

type userFollowClient struct {
	cc grpc.ClientConnInterface
}

func NewUserFollowClient(cc grpc.ClientConnInterface) UserFollowClient {
	return &userFollowClient{cc}
}

func (c *userFollowClient) AddNewUser(ctx context.Context, in *AddNewUserRequest, opts ...grpc.CallOption) (*AddNewUserResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AddNewUserResponse)
	err := c.cc.Invoke(ctx, UserFollow_AddNewUser_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userFollowClient) AddNewPost(ctx context.Context, in *AddNewPostRequest, opts ...grpc.CallOption) (*AddNewPostResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AddNewPostResponse)
	err := c.cc.Invoke(ctx, UserFollow_AddNewPost_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userFollowClient) GetPostsAddedByUser(ctx context.Context, in *GetPostsAddedByUserRequest, opts ...grpc.CallOption) (*GetPostsAddedByUserResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetPostsAddedByUserResponse)
	err := c.cc.Invoke(ctx, UserFollow_GetPostsAddedByUser_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userFollowClient) SubscribeUsers(ctx context.Context, in *SubscribeUsersRequest, opts ...grpc.CallOption) (*SubscribeUsersResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SubscribeUsersResponse)
	err := c.cc.Invoke(ctx, UserFollow_SubscribeUsers_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userFollowClient) GetNumSubscribersAndSubscriptions(ctx context.Context, in *GetSubscribersAndSubscriptionsRequest, opts ...grpc.CallOption) (*GetSubscribersAndSubscriptionsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetSubscribersAndSubscriptionsResponse)
	err := c.cc.Invoke(ctx, UserFollow_GetNumSubscribersAndSubscriptions_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UserFollowServer is the server API for UserFollow service.
// All implementations must embed UnimplementedUserFollowServer
// for forward compatibility.
type UserFollowServer interface {
	// Создание нового пользователя
	AddNewUser(context.Context, *AddNewUserRequest) (*AddNewUserResponse, error)
	// Создание нового поста
	AddNewPost(context.Context, *AddNewPostRequest) (*AddNewPostResponse, error)
	// Получить созданные пользователем посты
	GetPostsAddedByUser(context.Context, *GetPostsAddedByUserRequest) (*GetPostsAddedByUserResponse, error)
	// Подписать одного пользователя на другого
	SubscribeUsers(context.Context, *SubscribeUsersRequest) (*SubscribeUsersResponse, error)
	// Получить количество подписок и подписчиков пользователя
	GetNumSubscribersAndSubscriptions(context.Context, *GetSubscribersAndSubscriptionsRequest) (*GetSubscribersAndSubscriptionsResponse, error)
	mustEmbedUnimplementedUserFollowServer()
}

// UnimplementedUserFollowServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedUserFollowServer struct{}

func (UnimplementedUserFollowServer) AddNewUser(context.Context, *AddNewUserRequest) (*AddNewUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddNewUser not implemented")
}
func (UnimplementedUserFollowServer) AddNewPost(context.Context, *AddNewPostRequest) (*AddNewPostResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddNewPost not implemented")
}
func (UnimplementedUserFollowServer) GetPostsAddedByUser(context.Context, *GetPostsAddedByUserRequest) (*GetPostsAddedByUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPostsAddedByUser not implemented")
}
func (UnimplementedUserFollowServer) SubscribeUsers(context.Context, *SubscribeUsersRequest) (*SubscribeUsersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SubscribeUsers not implemented")
}
func (UnimplementedUserFollowServer) GetNumSubscribersAndSubscriptions(context.Context, *GetSubscribersAndSubscriptionsRequest) (*GetSubscribersAndSubscriptionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNumSubscribersAndSubscriptions not implemented")
}
func (UnimplementedUserFollowServer) mustEmbedUnimplementedUserFollowServer() {}
func (UnimplementedUserFollowServer) testEmbeddedByValue()                    {}

// UnsafeUserFollowServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UserFollowServer will
// result in compilation errors.
type UnsafeUserFollowServer interface {
	mustEmbedUnimplementedUserFollowServer()
}

func RegisterUserFollowServer(s grpc.ServiceRegistrar, srv UserFollowServer) {
	// If the following call pancis, it indicates UnimplementedUserFollowServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&UserFollow_ServiceDesc, srv)
}

func _UserFollow_AddNewUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddNewUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserFollowServer).AddNewUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserFollow_AddNewUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserFollowServer).AddNewUser(ctx, req.(*AddNewUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserFollow_AddNewPost_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddNewPostRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserFollowServer).AddNewPost(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserFollow_AddNewPost_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserFollowServer).AddNewPost(ctx, req.(*AddNewPostRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserFollow_GetPostsAddedByUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPostsAddedByUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserFollowServer).GetPostsAddedByUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserFollow_GetPostsAddedByUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserFollowServer).GetPostsAddedByUser(ctx, req.(*GetPostsAddedByUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserFollow_SubscribeUsers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SubscribeUsersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserFollowServer).SubscribeUsers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserFollow_SubscribeUsers_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserFollowServer).SubscribeUsers(ctx, req.(*SubscribeUsersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserFollow_GetNumSubscribersAndSubscriptions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSubscribersAndSubscriptionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserFollowServer).GetNumSubscribersAndSubscriptions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserFollow_GetNumSubscribersAndSubscriptions_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserFollowServer).GetNumSubscribersAndSubscriptions(ctx, req.(*GetSubscribersAndSubscriptionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// UserFollow_ServiceDesc is the grpc.ServiceDesc for UserFollow service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var UserFollow_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "generated.UserFollow",
	HandlerType: (*UserFollowServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddNewUser",
			Handler:    _UserFollow_AddNewUser_Handler,
		},
		{
			MethodName: "AddNewPost",
			Handler:    _UserFollow_AddNewPost_Handler,
		},
		{
			MethodName: "GetPostsAddedByUser",
			Handler:    _UserFollow_GetPostsAddedByUser_Handler,
		},
		{
			MethodName: "SubscribeUsers",
			Handler:    _UserFollow_SubscribeUsers_Handler,
		},
		{
			MethodName: "GetNumSubscribersAndSubscriptions",
			Handler:    _UserFollow_GetNumSubscribersAndSubscriptions_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "user_follow.proto",
}
